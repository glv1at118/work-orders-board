{"version":3,"sources":["components/QueryPart.jsx","redux/actions.js","components/ItemPart.jsx","components/ListPart.jsx","App.js","redux/state.js","redux/reducers.js","redux/store.js","index.js"],"names":["QueryPart","handleNameQuery","event","props","updateNameQuery","target","value","handleTimeQuery","console","log","checked","updateTimeQuery","type","placeholder","id","onChange","this","className","React","Component","connect","newName","newTime","ItemPart","timeSort","sortedOrders","deadlineArr","x","orders","length","push","deadline","timeQuery","sort","a","b","y","nameSort","orderArr","filteredWorkerIdArr","filteredOrderArr","workers","name","toUpperCase","includes","nameQuery","workerId","convertTime","ms","timeFlag","d","Date","month","getMonth","day","getDate","year","getFullYear","hour","getHours","minute","getMinutes","second","getSeconds","map","order","key","description","src","image","alt","companyName","email","state","ListPart","makeRequest","dispatch","getState","workerIdArr","axios","get","then","response","data","worker","catch","error","App","myReducer","previousState","initialState","action","nextState","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","reduxStore","createStore","applyMiddleware","myThunk","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.81d2a286.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../styles/query-part.css';\r\nimport { connect } from 'react-redux';\r\nimport { updateNameQuery, updateTimeQuery } from '../redux/actions.js';\r\n\r\nclass QueryPart extends React.Component {\r\n    handleNameQuery = (event) => {\r\n        this.props.updateNameQuery(event.target.value);\r\n    }\r\n    handleTimeQuery = (event) => {\r\n        console.log(event.target.checked) // right is true, left is false\r\n        this.props.updateTimeQuery(event.target.checked);\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <input type=\"text\" placeholder=\"filter by worker name\" id=\"name-input\" onChange={this.handleNameQuery} />\r\n                <div id=\"slider-box\">\r\n                    <span className=\"titlePart\">Earliest First</span>\r\n                    <label className=\"switch\">\r\n                        <input type=\"checkbox\" id=\"deadline-input\" onChange={this.handleTimeQuery} />\r\n                        <span className=\"slider\"></span>\r\n                    </label>\r\n                    <span className=\"titlePart\">Latest First</span>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(null, { updateNameQuery, updateTimeQuery })(QueryPart);","import axios from 'axios';\r\n\r\nexport function makeRequest() {\r\n    return function (dispatch, getState) {\r\n        let workerIdArr = [];\r\n        axios.get(\"https://raw.githubusercontent.com/glv1at118/work-system-api/master/work_orders.json\")\r\n            .then(function (response) {\r\n                dispatch(updateOrders(response.data.orders));\r\n                for (let x = 0; x < getState().orders.length; x++) {\r\n                    let workerId = getState().orders[x].workerId;\r\n                    if (!workerIdArr.includes(workerId)) {\r\n                        workerIdArr.push(workerId);\r\n                    }\r\n                }\r\n                for (let y = 0; y < workerIdArr.length; y++) {\r\n                    axios.get(`https://raw.githubusercontent.com/glv1at118/work-system-api/master/${workerIdArr[y]}.json`)\r\n                        .then(function (response) {\r\n                            dispatch(updateWorkers(response.data.worker));\r\n                        }\r\n                        ).catch(function (error) {\r\n                            console.log(error);\r\n                        })\r\n                }\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            });\r\n        // Instead of the above ways, I can also use an object, with the worker's id as the object's keys, and the corresponding worker data as the value. Also use if statement, if there's already such an id, then it means there's already a worker value for it, in this case http request will not be made. If there's no such id, then add that id and make corresponding http request for the worker data. This can be more efficient.\r\n    }\r\n}\r\n\r\nexport function updateOrders(orders) {\r\n    return {\r\n        type: \"UPDATE_ORDERS\",\r\n        orders: orders\r\n    };\r\n}\r\n\r\nexport function updateWorkers(worker) {\r\n    return {\r\n        type: \"UPDATE_WORKERS\",\r\n        worker: worker\r\n    }\r\n}\r\n\r\nexport function updateNameQuery(newName) {\r\n    return {\r\n        type: \"UPDATE_NAME_QUERY\",\r\n        newName: newName\r\n    }\r\n}\r\n\r\nexport function updateTimeQuery(newTime) {\r\n    return {\r\n        type: \"UPDATE_TIME_QUERY\",\r\n        newTime: newTime\r\n    }\r\n}","import React from 'react';\r\nimport '../styles/item-part.css';\r\nimport { connect } from 'react-redux';\r\n\r\nclass ItemPart extends React.Component {\r\n    timeSort = () => {\r\n        let sortedOrders = [];\r\n        let deadlineArr = [];\r\n        for (let x = 0; x < this.props.orders.length; x++) {\r\n            deadlineArr.push(this.props.orders[x].deadline);\r\n        }\r\n        if (this.props.timeQuery) {\r\n            // sort latest first. Deadline number biggest first.\r\n            deadlineArr.sort(function (a, b) {\r\n                return b - a;\r\n            });\r\n\r\n        } else {\r\n            deadlineArr.sort(function (a, b) {\r\n                return a - b;\r\n            });\r\n        }\r\n        for (let x = 0; x < deadlineArr.length; x++) {\r\n            for (let y = 0; y < this.props.orders.length; y++) {\r\n                if (this.props.orders[y].deadline === deadlineArr[x]) {\r\n                    sortedOrders.push(this.props.orders[y]);\r\n                    // do not break in case there are 2 or more orders which have same deadline\r\n                }\r\n            }\r\n        }\r\n        return sortedOrders;\r\n    }\r\n    nameSort = (orderArr) => {\r\n        let filteredWorkerIdArr = [];\r\n        let filteredOrderArr = [];\r\n        for (let x in this.props.workers) {\r\n            if (this.props.workers[x].name.toUpperCase().includes(this.props.nameQuery.toUpperCase())) {\r\n                if (!filteredWorkerIdArr.includes(this.props.workers[x].id)) {\r\n                    filteredWorkerIdArr.push(this.props.workers[x].id);\r\n                }\r\n            }\r\n        }\r\n        for (let y = 0; y < orderArr.length; y++) {\r\n            if (filteredWorkerIdArr.includes(orderArr[y].workerId)) {\r\n                filteredOrderArr.push(orderArr[y]);\r\n            }\r\n        }\r\n        return filteredOrderArr;\r\n    }\r\n    convertTime = (ms) => {\r\n        let timeFlag = \"\";\r\n        let d = new Date(ms);\r\n        let month = d.getMonth() + 1;\r\n        let day = d.getDate();\r\n        let year = d.getFullYear();\r\n        let hour = d.getHours(); // 0 - 23\r\n        if (hour >= 0 && hour <= 11) {\r\n            timeFlag = \"AM\";\r\n        } else {\r\n            timeFlag = \"PM\";\r\n            if (hour !== 12) {\r\n                hour = hour - 12;\r\n            }\r\n        }\r\n        let minute = d.getMinutes();\r\n        let second = d.getSeconds();\r\n\r\n        let timeStr = `${month}/${day}/${year}, ${hour}:${minute}:${second} ${timeFlag}`;\r\n        return timeStr;\r\n    }\r\n    render() {\r\n        if (this.nameSort(this.timeSort()).length === 0) {\r\n            return <div id=\"noMatch\">No Results Found :(</div>;\r\n        } else {\r\n            return (\r\n                <ul>\r\n                    {\r\n                        this.nameSort(this.timeSort()).map((order) => (\r\n                            <li className=\"orderItem\" key={order.id}>\r\n                                <h2>{order.name}</h2>\r\n                                <p>{order.description}</p>\r\n                                <div className=\"workerInfo\">\r\n                                    <div className=\"leftBox\">\r\n                                        <img src={this.props.workers[`worker${order.workerId}`].image} alt=\"img not accessible\" />\r\n                                    </div>\r\n                                    <div className=\"rightBox\">\r\n                                        <h2>{this.props.workers[`worker${order.workerId}`].name}</h2>\r\n                                        <p>{this.props.workers[`worker${order.workerId}`].companyName}</p>\r\n                                        <p>{this.props.workers[`worker${order.workerId}`].email}</p>\r\n                                        <p>{this.convertTime(order.deadline)}</p>\r\n                                    </div>\r\n                                </div>\r\n                            </li>\r\n                        ))\r\n                    }\r\n                </ul>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect((state) => ({\r\n    orders: state.orders,\r\n    workers: state.workers,\r\n    nameQuery: state.nameQuery,\r\n    timeQuery: state.timeQuery\r\n}\r\n), null)(ItemPart);","import React from 'react';\r\nimport '../styles/list-part.css';\r\nimport ItemPart from './ItemPart.jsx';\r\nimport { makeRequest } from '../redux/actions.js';\r\nimport { connect } from 'react-redux';\r\n\r\nclass ListPart extends React.Component {\r\n    componentDidMount() {\r\n        this.props.makeRequest();\r\n    }\r\n    render() {\r\n        return (\r\n            <div id=\"displayZone\">\r\n                <ItemPart></ItemPart>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(null, { makeRequest })(ListPart);","import React from 'react';\nimport './styles/app.css';\nimport QueryPart from './components/QueryPart.jsx';\nimport ListPart from './components/ListPart.jsx'\n\nfunction App() {\n  return (\n    <div id=\"app\">\n      <QueryPart></QueryPart>\n      <ListPart></ListPart>\n    </div>\n  );\n}\n\nexport default App;\n","export default {\r\n    orders: [],\r\n    // workers: {\r\n    //     worker0: {\r\n    //         companyName: \"\",\r\n    //         email: \"\",\r\n    //         id: -1,\r\n    //         image: \"\",\r\n    //         name: \"\"\r\n    //     },\r\n    //     worker1: {\r\n    //         companyName: \"\",\r\n    //         email: \"\",\r\n    //         id: -1,\r\n    //         image: \"\",\r\n    //         name: \"\"\r\n    //     },\r\n    //     worker2: {\r\n    //         companyName: \"\",\r\n    //         email: \"\",\r\n    //         id: -1,\r\n    //         image: \"\",\r\n    //         name: \"\"\r\n    //     },\r\n    //     worker3: {\r\n    //         companyName: \"\",\r\n    //         email: \"\",\r\n    //         id: -1,\r\n    //         image: \"\",\r\n    //         name: \"\"\r\n    //     },\r\n    //     worker4: {\r\n    //         companyName: \"\",\r\n    //         email: \"\",\r\n    //         id: -1,\r\n    //         image: \"\",\r\n    //         name: \"\"\r\n    //     }\r\n    // },\r\n    workers: {},\r\n    nameQuery: \"\",\r\n    timeQuery: false\r\n};","import initialState from './state.js';\r\n\r\nfunction myReducer(previousState = initialState, action) {\r\n    let nextState = {\r\n        orders: [...previousState.orders],\r\n        workers: { ...previousState.workers },\r\n        nameQuery: previousState.nameQuery,\r\n        timeQuery: previousState.timeQuery\r\n    };\r\n    switch (action.type) {\r\n        case \"UPDATE_ORDERS\":\r\n            nextState.orders = action.orders;\r\n            return nextState;\r\n        case \"UPDATE_WORKERS\":\r\n            nextState.workers[`worker${action.worker.id}`] = action.worker;\r\n            return nextState;\r\n        case \"UPDATE_NAME_QUERY\":\r\n            nextState.nameQuery = action.newName;\r\n            return nextState;\r\n        case \"UPDATE_TIME_QUERY\":\r\n            nextState.timeQuery = action.newTime;\r\n            return nextState;\r\n        default:\r\n            return previousState;\r\n    }\r\n}\r\n\r\nexport default myReducer;","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport myReducer from './reducers.js';\r\nimport myThunk from 'redux-thunk';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport const reduxStore = createStore(myReducer, composeEnhancers(\r\n    applyMiddleware(myThunk)\r\n));","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { reduxStore } from './redux/store.js';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n    <Provider store={reduxStore}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}